#!/usr/bin/env ruby

require 'json'
require 'erb'
require 'find'
require 'yaml'

ROOT = File.expand_path File.join __FILE__, '../..'

# usage: prepare <settings>
# prepares the world to run

def level_paths world_dir
  Dir.chdir world_dir do
    level_paths = []
    Find.find('.') do |path|
      if path =~ /\/level\.dat$/
        level_paths << File.dirname(path).gsub(/^\.\//, '')
      end
    end
    level_paths
  end
end

def level_path world_dir
  level_paths(world_dir).min
end

def parse_options json_file
  json_file ? JSON.parse(File.read(json_file)) : {}
end

def write_server_properties
  template = ERB.new(File.read("#{ROOT}/template/server.properties.erb"))
  File.write "server.properties", template.result(binding)
end

def write_permissions world_dir, options
  permissions = {
    users: {},
    groups: {
      admins: {
        permissions: {
          'permissions.*' => true
        },
      },
      default: {}
    },
    messages: {
      build: '&cYou do not have permission to build here.'
    }
  }

  unless options['new_player_can_build']
    permissions[:groups][:builders] = {
      inheritance: ['default'],
      permissions: {
        'permissions.build' => true
      }
    }
    permissions[:groups][:default][:permissions] = {
      'permissions.build' => false
    }
  end

  options['ops'].split("\n").each do |player|
    permissions[:users][player] = {
      groups: ['admins']
    }
  end

  options['whitelist'].split("\n").each do |player|
    permissions[:users][player] = {
      groups: ['default']
    }
  end

  File.write "#{world_dir}/plugins/PermissionsBukkit/config.yml", YAML.dump(permissions)
end

def bool(field, default)
  ['1', 'true'].include?((@pack_options[field] || default).to_s)
end

# args
start_options_file = ARGV.shift

start_options = parse_options(start_options_file)
@port = start_options['port']
@pack_options = start_options['settings']
@level_name = level_path('.') || 'level'

working_dir = `pwd`.strip

Dir.chdir("#{ROOT}/template") do
  Dir["**/*"].reject{|f| File.directory? f }.each do |file|
    dest = File.join working_dir, File.dirname(file), File.basename(file, '.erb')
    `mkdir -p #{File.dirname(dest)}`

    if File.extname(file) == '.erb'
      template = ERB.new(File.read(file))
      File.write(dest, template.result)
    else
      `cp "#{file.gsub('$','\$')}" "#{dest.gsub('$','\$')}"`
    end
  end
end

write_server_properties
# write_permissions world_dir, @pack_options

File.write "ops.txt", @pack_options['ops']
File.write "white-list.txt", @pack_options['whitelist']
File.write "banned-players.txt", @pack_options['blacklist']
